//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Thu Jun  7 11:15:29 IST 2018
//
//
// Ports:
// Name                         I/O  size props
// RDY_ma_put                     O     1 const
// mn_get                         O    23
// RDY_mn_get                     O     1 const
// RDY_ma_train                   O     1
// RDY_ma_flush                   O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ma_put_pc                      I    64
// ma_train_pc                    I    64
// ma_train_truth                 I     1
// ma_train_prediction            I     1
// ma_train_counter               I     3
// ma_train_tag                   I     8
// ma_train_bank_bits             I     5
// ma_train_bank_no               I     3
// ma_train_bimodal               I     3
// EN_ma_put                      I     1
// EN_ma_train                    I     1
// EN_ma_flush                    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkbranch(CLK,
		RST_N,

		ma_put_pc,
		EN_ma_put,
		RDY_ma_put,

		mn_get,
		RDY_mn_get,

		ma_train_pc,
		ma_train_truth,
		ma_train_prediction,
		ma_train_counter,
		ma_train_tag,
		ma_train_bank_bits,
		ma_train_bank_no,
		ma_train_bimodal,
		EN_ma_train,
		RDY_ma_train,

		EN_ma_flush,
		RDY_ma_flush);
  input  CLK;
  input  RST_N;

  // action method ma_put
  input  [63 : 0] ma_put_pc;
  input  EN_ma_put;
  output RDY_ma_put;

  // value method mn_get
  output [22 : 0] mn_get;
  output RDY_mn_get;

  // action method ma_train
  input  [63 : 0] ma_train_pc;
  input  ma_train_truth;
  input  ma_train_prediction;
  input  [2 : 0] ma_train_counter;
  input  [7 : 0] ma_train_tag;
  input  [4 : 0] ma_train_bank_bits;
  input  [2 : 0] ma_train_bank_no;
  input  [2 : 0] ma_train_bimodal;
  input  EN_ma_train;
  output RDY_ma_train;

  // action method ma_flush
  input  EN_ma_flush;
  output RDY_ma_flush;

  // signals for module outputs
  wire [22 : 0] mn_get;
  wire RDY_ma_flush, RDY_ma_put, RDY_ma_train, RDY_mn_get;

  // register random_bank0_initialized
  reg random_bank0_initialized;
  wire random_bank0_initialized$D_IN, random_bank0_initialized$EN;

  // register random_bank1_initialized
  reg random_bank1_initialized;
  wire random_bank1_initialized$D_IN, random_bank1_initialized$EN;

  // register random_bank2_initialized
  reg random_bank2_initialized;
  wire random_bank2_initialized$D_IN, random_bank2_initialized$EN;

  // register rg_bank1_csr_p
  reg [7 : 0] rg_bank1_csr_p;
  wire [7 : 0] rg_bank1_csr_p$D_IN;
  wire rg_bank1_csr_p$EN;

  // register rg_bank1_csr_s
  reg [6 : 0] rg_bank1_csr_s;
  wire [6 : 0] rg_bank1_csr_s$D_IN;
  wire rg_bank1_csr_s$EN;

  // register rg_bank2_csr_indx
  reg [9 : 0] rg_bank2_csr_indx;
  wire [9 : 0] rg_bank2_csr_indx$D_IN;
  wire rg_bank2_csr_indx$EN;

  // register rg_bank2_csr_p
  reg [7 : 0] rg_bank2_csr_p;
  wire [7 : 0] rg_bank2_csr_p$D_IN;
  wire rg_bank2_csr_p$EN;

  // register rg_bank2_csr_s
  reg [6 : 0] rg_bank2_csr_s;
  wire [6 : 0] rg_bank2_csr_s$D_IN;
  wire rg_bank2_csr_s$EN;

  // register rg_bank3_csr_indx
  reg [9 : 0] rg_bank3_csr_indx;
  wire [9 : 0] rg_bank3_csr_indx$D_IN;
  wire rg_bank3_csr_indx$EN;

  // register rg_bank3_csr_p
  reg [7 : 0] rg_bank3_csr_p;
  wire [7 : 0] rg_bank3_csr_p$D_IN;
  wire rg_bank3_csr_p$EN;

  // register rg_bank3_csr_s
  reg [6 : 0] rg_bank3_csr_s;
  wire [6 : 0] rg_bank3_csr_s$D_IN;
  wire rg_bank3_csr_s$EN;

  // register rg_bank4_csr_indx
  reg [9 : 0] rg_bank4_csr_indx;
  wire [9 : 0] rg_bank4_csr_indx$D_IN;
  wire rg_bank4_csr_indx$EN;

  // register rg_bank4_csr_p
  reg [7 : 0] rg_bank4_csr_p;
  wire [7 : 0] rg_bank4_csr_p$D_IN;
  wire rg_bank4_csr_p$EN;

  // register rg_bank4_csr_s
  reg [6 : 0] rg_bank4_csr_s;
  wire [6 : 0] rg_bank4_csr_s$D_IN;
  wire rg_bank4_csr_s$EN;

  // register rg_bimodal_flush_addr
  reg [11 : 0] rg_bimodal_flush_addr;
  wire [11 : 0] rg_bimodal_flush_addr$D_IN;
  wire rg_bimodal_flush_addr$EN;

  // register rg_flush
  reg rg_flush;
  wire rg_flush$D_IN, rg_flush$EN;

  // register rg_global_flush_addr
  reg [9 : 0] rg_global_flush_addr;
  wire [9 : 0] rg_global_flush_addr$D_IN;
  wire rg_global_flush_addr$EN;

  // register rg_global_history
  reg [79 : 0] rg_global_history;
  wire [79 : 0] rg_global_history$D_IN;
  wire rg_global_history$EN;

  // register rg_init_rand
  reg rg_init_rand;
  wire rg_init_rand$D_IN, rg_init_rand$EN;

  // register rg_pc_copy
  reg [63 : 0] rg_pc_copy;
  wire [63 : 0] rg_pc_copy$D_IN;
  wire rg_pc_copy$EN;

  // ports of submodule bram_bank1
  wire [11 : 0] bram_bank1$DIA, bram_bank1$DIB, bram_bank1$DOA;
  wire [9 : 0] bram_bank1$ADDRA, bram_bank1$ADDRB;
  wire bram_bank1$ENA, bram_bank1$ENB, bram_bank1$WEA, bram_bank1$WEB;

  // ports of submodule bram_bank2
  wire [11 : 0] bram_bank2$DIA, bram_bank2$DIB, bram_bank2$DOA;
  wire [9 : 0] bram_bank2$ADDRA, bram_bank2$ADDRB;
  wire bram_bank2$ENA, bram_bank2$ENB, bram_bank2$WEA, bram_bank2$WEB;

  // ports of submodule bram_bank3
  wire [11 : 0] bram_bank3$DIA, bram_bank3$DIB, bram_bank3$DOA;
  wire [9 : 0] bram_bank3$ADDRA, bram_bank3$ADDRB;
  wire bram_bank3$ENA, bram_bank3$ENB, bram_bank3$WEA, bram_bank3$WEB;

  // ports of submodule bram_bank4
  wire [11 : 0] bram_bank4$DIA, bram_bank4$DIB, bram_bank4$DOA;
  wire [9 : 0] bram_bank4$ADDRA, bram_bank4$ADDRB;
  wire bram_bank4$ENA, bram_bank4$ENB, bram_bank4$WEA, bram_bank4$WEB;

  // ports of submodule bram_bimodal
  wire [11 : 0] bram_bimodal$ADDRA, bram_bimodal$ADDRB;
  wire [3 : 0] bram_bimodal$DIA, bram_bimodal$DIB, bram_bimodal$DOA;
  wire bram_bimodal$ENA, bram_bimodal$ENB, bram_bimodal$WEA, bram_bimodal$WEB;

  // ports of submodule random_bank0
  wire [2 : 0] random_bank0$OUT;
  wire random_bank0$EN;

  // ports of submodule random_bank1
  wire [2 : 0] random_bank1$OUT;
  wire random_bank1$EN;

  // ports of submodule random_bank2
  wire [2 : 0] random_bank2$OUT;
  wire random_bank2$EN;

  // inputs to muxes for submodule ports
  wire [11 : 0] MUX_bram_bank1$b_put_3__VAL_1,
		MUX_bram_bank2$b_put_3__VAL_1,
		MUX_bram_bank3$b_put_3__VAL_1,
		MUX_bram_bank4$b_put_3__VAL_1,
		MUX_rg_bimodal_flush_addr$write_1__VAL_1;
  wire [9 : 0] MUX_bram_bank1$b_put_2__VAL_1,
	       MUX_bram_bank2$b_put_2__VAL_1,
	       MUX_bram_bank3$b_put_2__VAL_1,
	       MUX_bram_bank4$b_put_2__VAL_1,
	       MUX_rg_global_flush_addr$write_1__VAL_1;
  wire [3 : 0] MUX_bram_bimodal$b_put_3__VAL_1;
  wire MUX_bram_bank1$b_put_1__SEL_1,
       MUX_bram_bank2$b_put_1__SEL_1,
       MUX_bram_bank3$b_put_1__SEL_1,
       MUX_bram_bank4$b_put_1__SEL_1,
       MUX_bram_bimodal$b_put_1__SEL_1,
       MUX_rg_bimodal_flush_addr$write_1__SEL_1,
       MUX_rg_flush$write_1__SEL_1,
       MUX_rg_global_flush_addr$write_1__SEL_1;

  // remaining internal signals
  reg [7 : 0] CASE_ma_train_bank_no_0_lv_new_tag2058_1_lv_ne_ETC__q7,
	      CASE_ma_train_bank_no_0_lv_new_tag3059_1_lv_ne_ETC__q8,
	      CASE_ma_train_bank_no_0_lv_new_tag4060_1_lv_ne_ETC__q9;
  reg [2 : 0] CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q1,
	      CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q2,
	      CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q3,
	      CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q4,
	      CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q5,
	      CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q6;
  wire [9 : 0] x__h4887, x__h7189;
  wire [7 : 0] IF_ma_train_truth_THEN_ma_train_tag_ELSE_IF_ma_ETC___d311,
	       IF_ma_train_truth_THEN_ma_train_tag_ELSE_IF_ma_ETC___d343,
	       IF_ma_train_truth_THEN_ma_train_tag_ELSE_IF_ma_ETC___d384,
	       IF_ma_train_truth_THEN_ma_train_tag_ELSE_IF_ma_ETC___d424,
	       IF_wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_ETC___d81,
	       lv_new_tag1__h5057,
	       lv_new_tag2__h5058,
	       lv_new_tag3__h5059,
	       lv_new_tag4__h5060,
	       x__h11606,
	       x__h11837,
	       x__h11883,
	       x__h11929,
	       x__h2823,
	       x__h2893,
	       x__h2962,
	       x__h3031,
	       x__read__h2395,
	       y__h11607,
	       y__h11838,
	       y__h11884,
	       y__h11930,
	       y__h2787,
	       y__h2857,
	       y__h2926,
	       y__h2995;
  wire [4 : 0] x__read__h2326;
  wire [3 : 0] IF_ma_train_prediction_THEN_IF_ma_train_bank_n_ETC___d272,
	       IF_ma_train_prediction_THEN_IF_ma_train_bank_n_ETC___d275;
  wire [2 : 0] IF_ma_train_bank_bits_BIT_4_70_OR_ma_train_bim_ETC___d303,
	       IF_ma_train_bank_bits_BIT_4_70_THEN_0b11_ELSE__ETC___d300,
	       IF_ma_train_bank_no_EQ_0_36_THEN_ma_train_coun_ETC___d266,
	       IF_ma_train_bank_no_EQ_0_36_THEN_ma_train_coun_ETC___d268,
	       IF_ma_train_counter_EQ_0b0_51_THEN_ma_train_co_ETC___d296,
	       IF_ma_train_counter_EQ_0b111_37_THEN_ma_train__ETC___d295,
	       IF_ma_train_prediction_THEN_IF_ma_train_bank_n_ETC___d305,
	       IF_ma_train_prediction_THEN_IF_ma_train_bank_n_ETC___d338,
	       IF_ma_train_prediction_THEN_IF_ma_train_bank_n_ETC___d379,
	       IF_ma_train_prediction_THEN_IF_ma_train_bank_n_ETC___d419,
	       IF_ma_train_prediction_THEN_IF_ma_train_counte_ETC___d297,
	       IF_wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_ETC___d76,
	       IF_wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_ETC___d85,
	       ma_train_counter_MINUS_1___d267,
	       ma_train_counter_PLUS_1___d265,
	       x__read__h2256,
	       x__read__h2464;
  wire IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d145,
       IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d155,
       IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d165,
       IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d176,
       IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d186,
       IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d194,
       IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d202,
       IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d216,
       IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d225,
       IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d234,
       IF_wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_ETC___d68,
       INV_rg_global_history_06_BIT_19_38_39_XOR_rg_b_ETC___d141,
       INV_rg_global_history_06_BIT_39_48_49_XOR_rg_b_ETC___d151,
       INV_rg_global_history_06_BIT_79_58_59_XOR_rg_b_ETC___d161,
       NOT_ma_train_bank_no_EQ_0_36_40_AND_ma_train_b_ETC___d370,
       NOT_ma_train_truth_58_AND_ma_train_bank_no_EQ__ETC___d332,
       NOT_ma_train_truth_58_AND_ma_train_bank_no_EQ__ETC___d411,
       ma_train_bank_no_EQ_1_41_AND_ma_train_bank_bit_ETC___d408,
       ma_train_truth_AND_ma_train_bank_no_EQ_3_43_45_ETC___d373,
       ma_train_truth_AND_ma_train_prediction_AND_ma__ETC___d263,
       wr_bank1_out_wget__1_BITS_8_TO_1_8_EQ_rg_pc_co_ETC___d64,
       wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_co_ETC___d56,
       wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d48,
       wr_bank4_out_wget__7_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d40,
       x__h10139,
       x__h10288,
       x__h14612,
       x__h14688,
       x__h14764,
       x__h14861,
       x__h15009,
       x__h15136,
       x__h15212,
       x__h15309,
       x__h15577,
       x__h15725,
       x__h9093,
       x__h9566,
       x__h9621,
       x__h9622,
       x__h9698,
       x__h9699,
       x__h9869,
       x__h9990,
       x__read__h2187;

  // action method ma_put
  assign RDY_ma_put = 1'd1 ;

  // value method mn_get
  assign mn_get =
	     { x__read__h2187,
	       x__read__h2256,
	       x__read__h2395,
	       x__read__h2326,
	       x__read__h2464,
	       bram_bimodal$DOA[3:1] } ;
  assign RDY_mn_get = 1'b1 ;

  // action method ma_train
  assign RDY_ma_train =
	     !rg_flush && random_bank0_initialized &&
	     random_bank1_initialized &&
	     random_bank2_initialized ;

  // action method ma_flush
  assign RDY_ma_flush = !rg_flush ;

  // submodule bram_bank1
  BRAM2Load #(.FILENAME("bank1.bin"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd10),
	      .DATA_WIDTH(32'd12),
	      .MEMSIZE(11'd1024),
	      .BINARY(1'd1)) bram_bank1(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(bram_bank1$ADDRA),
					.ADDRB(bram_bank1$ADDRB),
					.DIA(bram_bank1$DIA),
					.DIB(bram_bank1$DIB),
					.WEA(bram_bank1$WEA),
					.WEB(bram_bank1$WEB),
					.ENA(bram_bank1$ENA),
					.ENB(bram_bank1$ENB),
					.DOA(bram_bank1$DOA),
					.DOB());

  // submodule bram_bank2
  BRAM2Load #(.FILENAME("bank2.bin"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd10),
	      .DATA_WIDTH(32'd12),
	      .MEMSIZE(11'd1024),
	      .BINARY(1'd1)) bram_bank2(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(bram_bank2$ADDRA),
					.ADDRB(bram_bank2$ADDRB),
					.DIA(bram_bank2$DIA),
					.DIB(bram_bank2$DIB),
					.WEA(bram_bank2$WEA),
					.WEB(bram_bank2$WEB),
					.ENA(bram_bank2$ENA),
					.ENB(bram_bank2$ENB),
					.DOA(bram_bank2$DOA),
					.DOB());

  // submodule bram_bank3
  BRAM2Load #(.FILENAME("bank3.bin"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd10),
	      .DATA_WIDTH(32'd12),
	      .MEMSIZE(11'd1024),
	      .BINARY(1'd1)) bram_bank3(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(bram_bank3$ADDRA),
					.ADDRB(bram_bank3$ADDRB),
					.DIA(bram_bank3$DIA),
					.DIB(bram_bank3$DIB),
					.WEA(bram_bank3$WEA),
					.WEB(bram_bank3$WEB),
					.ENA(bram_bank3$ENA),
					.ENB(bram_bank3$ENB),
					.DOA(bram_bank3$DOA),
					.DOB());

  // submodule bram_bank4
  BRAM2Load #(.FILENAME("bank4.bin"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd10),
	      .DATA_WIDTH(32'd12),
	      .MEMSIZE(11'd1024),
	      .BINARY(1'd1)) bram_bank4(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(bram_bank4$ADDRA),
					.ADDRB(bram_bank4$ADDRB),
					.DIA(bram_bank4$DIA),
					.DIB(bram_bank4$DIB),
					.WEA(bram_bank4$WEA),
					.WEB(bram_bank4$WEB),
					.ENA(bram_bank4$ENA),
					.ENB(bram_bank4$ENB),
					.DOA(bram_bank4$DOA),
					.DOB());

  // submodule bram_bimodal
  BRAM2Load #(.FILENAME("bimodal.bin"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd12),
	      .DATA_WIDTH(32'd4),
	      .MEMSIZE(13'd4096),
	      .BINARY(1'd1)) bram_bimodal(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(bram_bimodal$ADDRA),
					  .ADDRB(bram_bimodal$ADDRB),
					  .DIA(bram_bimodal$DIA),
					  .DIB(bram_bimodal$DIB),
					  .WEA(bram_bimodal$WEA),
					  .WEB(bram_bimodal$WEB),
					  .ENA(bram_bimodal$ENA),
					  .ENB(bram_bimodal$ENB),
					  .DOA(bram_bimodal$DOA),
					  .DOB());

  // submodule random_bank0
  ConstrainedRandom #(.width(32'd3),
		      .min(3'd1),
		      .max(3'd4)) random_bank0(.RST(RST_N),
					       .CLK(CLK),
					       .EN(random_bank0$EN),
					       .OUT(random_bank0$OUT));

  // submodule random_bank1
  ConstrainedRandom #(.width(32'd3),
		      .min(3'd2),
		      .max(3'd4)) random_bank1(.RST(RST_N),
					       .CLK(CLK),
					       .EN(random_bank1$EN),
					       .OUT(random_bank1$OUT));

  // submodule random_bank2
  ConstrainedRandom #(.width(32'd3),
		      .min(3'd3),
		      .max(3'd4)) random_bank2(.RST(RST_N),
					       .CLK(CLK),
					       .EN(random_bank2$EN),
					       .OUT(random_bank2$OUT));

  // inputs to muxes for submodule ports
  assign MUX_bram_bank1$b_put_1__SEL_1 =
	     EN_ma_train &&
	     (ma_train_truth && ma_train_bank_no == 3'd1 ||
	      !ma_train_truth &&
	      (ma_train_bank_no == 3'd0 &&
	       (ma_train_bank_bits[3:0] == 4'b1111 &&
		random_bank0$OUT == 3'd1 ||
		!ma_train_bank_bits[3]) ||
	       ma_train_bank_no == 3'd1)) ;
  assign MUX_bram_bank2$b_put_1__SEL_1 =
	     EN_ma_train &&
	     (ma_train_truth && ma_train_bank_no == 3'd2 ||
	      NOT_ma_train_truth_58_AND_ma_train_bank_no_EQ__ETC___d332) ;
  assign MUX_bram_bank3$b_put_1__SEL_1 =
	     EN_ma_train &&
	     ma_train_truth_AND_ma_train_bank_no_EQ_3_43_45_ETC___d373 ;
  assign MUX_bram_bank4$b_put_1__SEL_1 =
	     EN_ma_train &&
	     (ma_train_truth && ma_train_bank_no == 3'd4 ||
	      NOT_ma_train_truth_58_AND_ma_train_bank_no_EQ__ETC___d411) ;
  assign MUX_bram_bimodal$b_put_1__SEL_1 =
	     EN_ma_train &&
	     ma_train_truth_AND_ma_train_prediction_AND_ma__ETC___d263 ;
  assign MUX_rg_bimodal_flush_addr$write_1__SEL_1 =
	     rg_flush && rg_bimodal_flush_addr != 12'd4095 ;
  assign MUX_rg_flush$write_1__SEL_1 =
	     rg_flush && rg_bimodal_flush_addr == 12'd4095 ;
  assign MUX_rg_global_flush_addr$write_1__SEL_1 =
	     rg_flush && rg_global_flush_addr != 10'd1023 ;
  assign MUX_bram_bank1$b_put_2__VAL_1 = x__h7189 ^ rg_global_history[9:0] ;
  assign MUX_bram_bank1$b_put_3__VAL_1 =
	     { ma_train_truth ?
		 IF_ma_train_prediction_THEN_IF_ma_train_counte_ETC___d297 :
		 IF_ma_train_prediction_THEN_IF_ma_train_bank_n_ETC___d305,
	       IF_ma_train_truth_THEN_ma_train_tag_ELSE_IF_ma_ETC___d311,
	       ma_train_truth } ;
  assign MUX_bram_bank2$b_put_2__VAL_1 = x__h7189 ^ rg_bank2_csr_indx ;
  assign MUX_bram_bank2$b_put_3__VAL_1 =
	     { ma_train_truth ?
		 IF_ma_train_prediction_THEN_IF_ma_train_counte_ETC___d297 :
		 IF_ma_train_prediction_THEN_IF_ma_train_bank_n_ETC___d338,
	       IF_ma_train_truth_THEN_ma_train_tag_ELSE_IF_ma_ETC___d343,
	       ma_train_truth } ;
  assign MUX_bram_bank3$b_put_2__VAL_1 = x__h7189 ^ rg_bank3_csr_indx ;
  assign MUX_bram_bank3$b_put_3__VAL_1 =
	     { ma_train_truth ?
		 IF_ma_train_prediction_THEN_IF_ma_train_counte_ETC___d297 :
		 IF_ma_train_prediction_THEN_IF_ma_train_bank_n_ETC___d379,
	       IF_ma_train_truth_THEN_ma_train_tag_ELSE_IF_ma_ETC___d384,
	       ma_train_truth } ;
  assign MUX_bram_bank4$b_put_2__VAL_1 = x__h7189 ^ rg_bank4_csr_indx ;
  assign MUX_bram_bank4$b_put_3__VAL_1 =
	     { ma_train_truth ?
		 IF_ma_train_prediction_THEN_IF_ma_train_counte_ETC___d297 :
		 IF_ma_train_prediction_THEN_IF_ma_train_bank_n_ETC___d419,
	       IF_ma_train_truth_THEN_ma_train_tag_ELSE_IF_ma_ETC___d424,
	       ma_train_truth } ;
  assign MUX_bram_bimodal$b_put_3__VAL_1 =
	     ma_train_truth ?
	       IF_ma_train_prediction_THEN_IF_ma_train_bank_n_ETC___d272 :
	       IF_ma_train_prediction_THEN_IF_ma_train_bank_n_ETC___d275 ;
  assign MUX_rg_bimodal_flush_addr$write_1__VAL_1 =
	     rg_bimodal_flush_addr + 12'd1 ;
  assign MUX_rg_global_flush_addr$write_1__VAL_1 =
	     rg_global_flush_addr + 10'd1 ;

  // register random_bank0_initialized
  assign random_bank0_initialized$D_IN = 1'd1 ;
  assign random_bank0_initialized$EN = rg_init_rand ;

  // register random_bank1_initialized
  assign random_bank1_initialized$D_IN = 1'd1 ;
  assign random_bank1_initialized$EN = rg_init_rand ;

  // register random_bank2_initialized
  assign random_bank2_initialized$D_IN = 1'd1 ;
  assign random_bank2_initialized$EN = rg_init_rand ;

  // register rg_bank1_csr_p
  assign rg_bank1_csr_p$D_IN =
	     { rg_bank1_csr_p[6],
	       x__h14861,
	       rg_bank1_csr_p[4:0],
	       IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d176 } ;
  assign rg_bank1_csr_p$EN = EN_ma_train ;

  // register rg_bank1_csr_s
  assign rg_bank1_csr_s$D_IN =
	     { rg_bank1_csr_s[5:4],
	       x__h15309,
	       rg_bank1_csr_p[2:0],
	       IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d176 } ;
  assign rg_bank1_csr_s$EN = EN_ma_train ;

  // register rg_bank2_csr_indx
  assign rg_bank2_csr_indx$D_IN =
	     { rg_bank2_csr_indx[8:0],
	       IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d145 } ;
  assign rg_bank2_csr_indx$EN = EN_ma_train ;

  // register rg_bank2_csr_p
  assign rg_bank2_csr_p$D_IN =
	     { rg_bank2_csr_p[6:4],
	       x__h15009,
	       rg_bank2_csr_p[2:0],
	       IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d186 } ;
  assign rg_bank2_csr_p$EN = EN_ma_train ;

  // register rg_bank2_csr_s
  assign rg_bank2_csr_s$D_IN =
	     { rg_bank2_csr_s[5] ^ rg_global_history[19],
	       rg_bank2_csr_p[4:0],
	       IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d216 } ;
  assign rg_bank2_csr_s$EN = EN_ma_train ;

  // register rg_bank3_csr_indx
  assign rg_bank3_csr_indx$D_IN =
	     { rg_bank3_csr_indx[8:0],
	       IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d155 } ;
  assign rg_bank3_csr_indx$EN = EN_ma_train ;

  // register rg_bank3_csr_p
  assign rg_bank3_csr_p$D_IN =
	     { rg_bank3_csr_p[6:0],
	       IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d194 } ;
  assign rg_bank3_csr_p$EN = EN_ma_train ;

  // register rg_bank3_csr_s
  assign rg_bank3_csr_s$D_IN =
	     { rg_bank3_csr_s[5],
	       x__h15577,
	       rg_bank3_csr_p[3:0],
	       IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d225 } ;
  assign rg_bank3_csr_s$EN = EN_ma_train ;

  // register rg_bank4_csr_indx
  assign rg_bank4_csr_indx$D_IN =
	     { rg_bank4_csr_indx[8:0],
	       IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d165 } ;
  assign rg_bank4_csr_indx$EN = EN_ma_train ;

  // register rg_bank4_csr_p
  assign rg_bank4_csr_p$D_IN =
	     { rg_bank4_csr_p[6:0],
	       IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d202 } ;
  assign rg_bank4_csr_p$EN = EN_ma_train ;

  // register rg_bank4_csr_s
  assign rg_bank4_csr_s$D_IN =
	     { rg_bank4_csr_s[5:3],
	       x__h15725,
	       rg_bank4_csr_p[1:0],
	       IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d234 } ;
  assign rg_bank4_csr_s$EN = EN_ma_train ;

  // register rg_bimodal_flush_addr
  assign rg_bimodal_flush_addr$D_IN =
	     MUX_rg_bimodal_flush_addr$write_1__SEL_1 ?
	       MUX_rg_bimodal_flush_addr$write_1__VAL_1 :
	       12'd0 ;
  assign rg_bimodal_flush_addr$EN =
	     rg_flush && rg_bimodal_flush_addr != 12'd4095 || EN_ma_flush ;

  // register rg_flush
  assign rg_flush$D_IN = !MUX_rg_flush$write_1__SEL_1 ;
  assign rg_flush$EN =
	     rg_flush && rg_bimodal_flush_addr == 12'd4095 || EN_ma_flush ;

  // register rg_global_flush_addr
  assign rg_global_flush_addr$D_IN =
	     MUX_rg_global_flush_addr$write_1__SEL_1 ?
	       MUX_rg_global_flush_addr$write_1__VAL_1 :
	       10'd0 ;
  assign rg_global_flush_addr$EN =
	     rg_flush && rg_global_flush_addr != 10'd1023 || EN_ma_flush ;

  // register rg_global_history
  assign rg_global_history$D_IN =
	     { rg_global_history[78:0],
	       !(ma_train_truth ^ ma_train_prediction) } ;
  assign rg_global_history$EN = EN_ma_train ;

  // register rg_init_rand
  assign rg_init_rand$D_IN = 1'd0 ;
  assign rg_init_rand$EN = rg_init_rand ;

  // register rg_pc_copy
  assign rg_pc_copy$D_IN = ma_put_pc ;
  assign rg_pc_copy$EN = EN_ma_put ;

  // submodule bram_bank1
  assign bram_bank1$ADDRA = x__h4887 ^ rg_global_history[9:0] ;
  assign bram_bank1$ADDRB =
	     MUX_bram_bank1$b_put_1__SEL_1 ?
	       MUX_bram_bank1$b_put_2__VAL_1 :
	       rg_global_flush_addr ;
  assign bram_bank1$DIA = 12'b101010101010 /* unspecified value */  ;
  assign bram_bank1$DIB =
	     MUX_bram_bank1$b_put_1__SEL_1 ?
	       MUX_bram_bank1$b_put_3__VAL_1 :
	       12'b011000000000 ;
  assign bram_bank1$WEA = 1'd0 ;
  assign bram_bank1$WEB = 1'd1 ;
  assign bram_bank1$ENA = EN_ma_put ;
  assign bram_bank1$ENB = MUX_bram_bank1$b_put_1__SEL_1 || rg_flush ;

  // submodule bram_bank2
  assign bram_bank2$ADDRA = x__h4887 ^ rg_bank2_csr_indx ;
  assign bram_bank2$ADDRB =
	     MUX_bram_bank2$b_put_1__SEL_1 ?
	       MUX_bram_bank2$b_put_2__VAL_1 :
	       rg_global_flush_addr ;
  assign bram_bank2$DIA = 12'b101010101010 /* unspecified value */  ;
  assign bram_bank2$DIB =
	     MUX_bram_bank2$b_put_1__SEL_1 ?
	       MUX_bram_bank2$b_put_3__VAL_1 :
	       12'b011000000000 ;
  assign bram_bank2$WEA = 1'd0 ;
  assign bram_bank2$WEB = 1'd1 ;
  assign bram_bank2$ENA = EN_ma_put ;
  assign bram_bank2$ENB = MUX_bram_bank2$b_put_1__SEL_1 || rg_flush ;

  // submodule bram_bank3
  assign bram_bank3$ADDRA = x__h4887 ^ rg_bank3_csr_indx ;
  assign bram_bank3$ADDRB =
	     MUX_bram_bank3$b_put_1__SEL_1 ?
	       MUX_bram_bank3$b_put_2__VAL_1 :
	       rg_global_flush_addr ;
  assign bram_bank3$DIA = 12'b101010101010 /* unspecified value */  ;
  assign bram_bank3$DIB =
	     MUX_bram_bank3$b_put_1__SEL_1 ?
	       MUX_bram_bank3$b_put_3__VAL_1 :
	       12'b011000000000 ;
  assign bram_bank3$WEA = 1'd0 ;
  assign bram_bank3$WEB = 1'd1 ;
  assign bram_bank3$ENA = EN_ma_put ;
  assign bram_bank3$ENB =
	     EN_ma_train &&
	     ma_train_truth_AND_ma_train_bank_no_EQ_3_43_45_ETC___d373 ||
	     rg_flush ;

  // submodule bram_bank4
  assign bram_bank4$ADDRA = x__h4887 ^ rg_bank4_csr_indx ;
  assign bram_bank4$ADDRB =
	     MUX_bram_bank4$b_put_1__SEL_1 ?
	       MUX_bram_bank4$b_put_2__VAL_1 :
	       rg_global_flush_addr ;
  assign bram_bank4$DIA = 12'b101010101010 /* unspecified value */  ;
  assign bram_bank4$DIB =
	     MUX_bram_bank4$b_put_1__SEL_1 ?
	       MUX_bram_bank4$b_put_3__VAL_1 :
	       12'b011000000000 ;
  assign bram_bank4$WEA = 1'd0 ;
  assign bram_bank4$WEB = 1'd1 ;
  assign bram_bank4$ENA = EN_ma_put ;
  assign bram_bank4$ENB = MUX_bram_bank4$b_put_1__SEL_1 || rg_flush ;

  // submodule bram_bimodal
  assign bram_bimodal$ADDRA = ma_put_pc[11:0] ;
  assign bram_bimodal$ADDRB =
	     MUX_bram_bimodal$b_put_1__SEL_1 ?
	       ma_train_pc[11:0] :
	       rg_bimodal_flush_addr ;
  assign bram_bimodal$DIA = 4'b1010 /* unspecified value */  ;
  assign bram_bimodal$DIB =
	     MUX_bram_bimodal$b_put_1__SEL_1 ?
	       MUX_bram_bimodal$b_put_3__VAL_1 :
	       4'b0110 ;
  assign bram_bimodal$WEA = 1'd0 ;
  assign bram_bimodal$WEB = 1'd1 ;
  assign bram_bimodal$ENA = EN_ma_put ;
  assign bram_bimodal$ENB =
	     EN_ma_train &&
	     ma_train_truth_AND_ma_train_prediction_AND_ma__ETC___d263 ||
	     rg_flush ;

  // submodule random_bank0
  assign random_bank0$EN = !random_bank0_initialized || EN_ma_train ;

  // submodule random_bank1
  assign random_bank1$EN = !random_bank1_initialized || EN_ma_train ;

  // submodule random_bank2
  assign random_bank2$EN = !random_bank2_initialized || EN_ma_train ;

  // remaining internal signals
  assign IF_ma_train_bank_bits_BIT_4_70_OR_ma_train_bim_ETC___d303 =
	     (ma_train_bank_bits[4] || ma_train_bimodal[2]) ?
	       3'b100 :
	       3'b011 ;
  assign IF_ma_train_bank_bits_BIT_4_70_THEN_0b11_ELSE__ETC___d300 =
	     ma_train_bank_bits[4] ?
	       3'b011 :
	       (ma_train_bimodal[2] ? 3'b100 : 3'b011) ;
  assign IF_ma_train_bank_no_EQ_0_36_THEN_ma_train_coun_ETC___d266 =
	     (ma_train_bank_no == 3'd0) ?
	       ma_train_counter_PLUS_1___d265 :
	       ma_train_bimodal ;
  assign IF_ma_train_bank_no_EQ_0_36_THEN_ma_train_coun_ETC___d268 =
	     (ma_train_bank_no == 3'd0) ?
	       ma_train_counter_MINUS_1___d267 :
	       ma_train_bimodal ;
  assign IF_ma_train_counter_EQ_0b0_51_THEN_ma_train_co_ETC___d296 =
	     (ma_train_counter == 3'b0) ?
	       ma_train_counter :
	       ma_train_counter_MINUS_1___d267 ;
  assign IF_ma_train_counter_EQ_0b111_37_THEN_ma_train__ETC___d295 =
	     (ma_train_counter == 3'b111) ?
	       ma_train_counter :
	       ma_train_counter_PLUS_1___d265 ;
  assign IF_ma_train_prediction_THEN_IF_ma_train_bank_n_ETC___d272 =
	     { ma_train_prediction ?
		 IF_ma_train_bank_no_EQ_0_36_THEN_ma_train_coun_ETC___d266 :
		 IF_ma_train_bank_no_EQ_0_36_THEN_ma_train_coun_ETC___d268,
	       ma_train_bank_no != 3'd0 || ma_train_bank_bits[4] } ;
  assign IF_ma_train_prediction_THEN_IF_ma_train_bank_n_ETC___d275 =
	     { ma_train_prediction ?
		 IF_ma_train_bank_no_EQ_0_36_THEN_ma_train_coun_ETC___d268 :
		 IF_ma_train_bank_no_EQ_0_36_THEN_ma_train_coun_ETC___d266,
	       ma_train_bank_no == 3'd0 && ma_train_bank_bits[4] } ;
  assign IF_ma_train_prediction_THEN_IF_ma_train_bank_n_ETC___d305 =
	     ma_train_prediction ?
	       ((ma_train_bank_no == 3'd0) ?
		  IF_ma_train_bank_bits_BIT_4_70_THEN_0b11_ELSE__ETC___d300 :
		  IF_ma_train_counter_EQ_0b0_51_THEN_ma_train_co_ETC___d296) :
	       ((ma_train_bank_no == 3'd0) ?
		  IF_ma_train_bank_bits_BIT_4_70_OR_ma_train_bim_ETC___d303 :
		  IF_ma_train_counter_EQ_0b111_37_THEN_ma_train__ETC___d295) ;
  assign IF_ma_train_prediction_THEN_IF_ma_train_bank_n_ETC___d338 =
	     ma_train_prediction ?
	       CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q1 :
	       CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q2 ;
  assign IF_ma_train_prediction_THEN_IF_ma_train_bank_n_ETC___d379 =
	     ma_train_prediction ?
	       CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q3 :
	       CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q4 ;
  assign IF_ma_train_prediction_THEN_IF_ma_train_bank_n_ETC___d419 =
	     ma_train_prediction ?
	       CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q5 :
	       CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q6 ;
  assign IF_ma_train_prediction_THEN_IF_ma_train_counte_ETC___d297 =
	     ma_train_prediction ?
	       IF_ma_train_counter_EQ_0b111_37_THEN_ma_train__ETC___d295 :
	       IF_ma_train_counter_EQ_0b0_51_THEN_ma_train_co_ETC___d296 ;
  assign IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d145 =
	     ma_train_truth ?
	       (ma_train_prediction ?
		  INV_rg_global_history_06_BIT_19_38_39_XOR_rg_b_ETC___d141 :
		  x__h14612) :
	       (ma_train_prediction ?
		  x__h14612 :
		  INV_rg_global_history_06_BIT_19_38_39_XOR_rg_b_ETC___d141) ;
  assign IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d155 =
	     ma_train_truth ?
	       (ma_train_prediction ?
		  INV_rg_global_history_06_BIT_39_48_49_XOR_rg_b_ETC___d151 :
		  x__h14688) :
	       (ma_train_prediction ?
		  x__h14688 :
		  INV_rg_global_history_06_BIT_39_48_49_XOR_rg_b_ETC___d151) ;
  assign IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d165 =
	     ma_train_truth ?
	       (ma_train_prediction ?
		  INV_rg_global_history_06_BIT_79_58_59_XOR_rg_b_ETC___d161 :
		  x__h14764) :
	       (ma_train_prediction ?
		  x__h14764 :
		  INV_rg_global_history_06_BIT_79_58_59_XOR_rg_b_ETC___d161) ;
  assign IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d176 =
	     ma_train_truth ?
	       (ma_train_prediction ? x__h9869 : rg_bank1_csr_p[7]) :
	       (ma_train_prediction ? rg_bank1_csr_p[7] : x__h9869) ;
  assign IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d186 =
	     ma_train_truth ?
	       (ma_train_prediction ? x__h9566 : rg_bank2_csr_p[7]) :
	       (ma_train_prediction ? rg_bank2_csr_p[7] : x__h9566) ;
  assign IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d194 =
	     ma_train_truth ?
	       (ma_train_prediction ? x__h9621 : x__h15136) :
	       (ma_train_prediction ? x__h15136 : x__h9621) ;
  assign IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d202 =
	     ma_train_truth ?
	       (ma_train_prediction ? x__h9698 : x__h15212) :
	       (ma_train_prediction ? x__h15212 : x__h9698) ;
  assign IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d216 =
	     ma_train_truth ?
	       (ma_train_prediction ? x__h9990 : rg_bank2_csr_p[6]) :
	       (ma_train_prediction ? rg_bank2_csr_p[6] : x__h9990) ;
  assign IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d225 =
	     ma_train_truth ?
	       (ma_train_prediction ? x__h10139 : rg_bank3_csr_p[7]) :
	       (ma_train_prediction ? rg_bank3_csr_p[7] : x__h10139) ;
  assign IF_ma_train_truth_THEN_IF_ma_train_prediction__ETC___d234 =
	     ma_train_truth ?
	       (ma_train_prediction ? x__h10288 : rg_bank4_csr_p[7]) :
	       (ma_train_prediction ? rg_bank4_csr_p[7] : x__h10288) ;
  assign IF_ma_train_truth_THEN_ma_train_tag_ELSE_IF_ma_ETC___d311 =
	     ma_train_truth ?
	       ma_train_tag :
	       ((ma_train_bank_no == 3'd0) ?
		  lv_new_tag1__h5057 :
		  ma_train_tag) ;
  assign IF_ma_train_truth_THEN_ma_train_tag_ELSE_IF_ma_ETC___d343 =
	     ma_train_truth ?
	       ma_train_tag :
	       CASE_ma_train_bank_no_0_lv_new_tag2058_1_lv_ne_ETC__q7 ;
  assign IF_ma_train_truth_THEN_ma_train_tag_ELSE_IF_ma_ETC___d384 =
	     ma_train_truth ?
	       ma_train_tag :
	       CASE_ma_train_bank_no_0_lv_new_tag3059_1_lv_ne_ETC__q8 ;
  assign IF_ma_train_truth_THEN_ma_train_tag_ELSE_IF_ma_ETC___d424 =
	     ma_train_truth ?
	       ma_train_tag :
	       CASE_ma_train_bank_no_0_lv_new_tag4060_1_lv_ne_ETC__q9 ;
  assign IF_wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_ETC___d68 =
	     wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_co_ETC___d56 ?
	       bram_bank2$DOA[11] :
	       (wr_bank1_out_wget__1_BITS_8_TO_1_8_EQ_rg_pc_co_ETC___d64 ?
		  bram_bank1$DOA[11] :
		  bram_bimodal$DOA[3]) ;
  assign IF_wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_ETC___d76 =
	     wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_co_ETC___d56 ?
	       bram_bank2$DOA[11:9] :
	       (wr_bank1_out_wget__1_BITS_8_TO_1_8_EQ_rg_pc_co_ETC___d64 ?
		  bram_bank1$DOA[11:9] :
		  bram_bimodal$DOA[3:1]) ;
  assign IF_wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_ETC___d81 =
	     wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d48 ?
	       bram_bank3$DOA[8:1] :
	       (wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_co_ETC___d56 ?
		  bram_bank2$DOA[8:1] :
		  bram_bank1$DOA[8:1]) ;
  assign IF_wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_ETC___d85 =
	     wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d48 ?
	       3'b011 :
	       (wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_co_ETC___d56 ?
		  3'b010 :
		  (wr_bank1_out_wget__1_BITS_8_TO_1_8_EQ_rg_pc_co_ETC___d64 ?
		     3'b001 :
		     3'b0)) ;
  assign INV_rg_global_history_06_BIT_19_38_39_XOR_rg_b_ETC___d141 =
	     x__h9093 ^ rg_bank2_csr_indx[9] ;
  assign INV_rg_global_history_06_BIT_39_48_49_XOR_rg_b_ETC___d151 =
	     x__h9622 ^ rg_bank3_csr_indx[9] ;
  assign INV_rg_global_history_06_BIT_79_58_59_XOR_rg_b_ETC___d161 =
	     x__h9699 ^ rg_bank4_csr_indx[9] ;
  assign NOT_ma_train_bank_no_EQ_0_36_40_AND_ma_train_b_ETC___d370 =
	     ma_train_bank_no == 3'd1 &&
	     (ma_train_bank_bits[2:0] == 3'b111 && random_bank1$OUT == 3'd3 ||
	      !ma_train_bank_bits[1]) ||
	     ma_train_bank_no == 3'd2 &&
	     (ma_train_bank_bits[1:0] == 2'b11 && random_bank2$OUT == 3'd3 ||
	      !ma_train_bank_bits[1]) ||
	     ma_train_bank_no == 3'd3 ;
  assign NOT_ma_train_truth_58_AND_ma_train_bank_no_EQ__ETC___d332 =
	     !ma_train_truth &&
	     (ma_train_bank_no == 3'd0 &&
	      (ma_train_bank_bits[3:0] == 4'b1111 &&
	       random_bank0$OUT == 3'd2 ||
	       !ma_train_bank_bits[2]) ||
	      ma_train_bank_no == 3'd1 &&
	      (ma_train_bank_bits[2:0] == 3'b111 &&
	       random_bank1$OUT == 3'd2 ||
	       !ma_train_bank_bits[2]) ||
	      ma_train_bank_no == 3'd2) ;
  assign NOT_ma_train_truth_58_AND_ma_train_bank_no_EQ__ETC___d411 =
	     !ma_train_truth &&
	     (ma_train_bank_no == 3'd0 &&
	      (ma_train_bank_bits[3:0] == 4'b1111 &&
	       random_bank0$OUT == 3'd4 ||
	       !ma_train_bank_bits[0]) ||
	      ma_train_bank_no != 3'd0 &&
	      ma_train_bank_no_EQ_1_41_AND_ma_train_bank_bit_ETC___d408) ;
  assign lv_new_tag1__h5057 = x__h11606 ^ y__h11607 ;
  assign lv_new_tag2__h5058 = x__h11837 ^ y__h11838 ;
  assign lv_new_tag3__h5059 = x__h11883 ^ y__h11884 ;
  assign lv_new_tag4__h5060 = x__h11929 ^ y__h11930 ;
  assign ma_train_bank_no_EQ_1_41_AND_ma_train_bank_bit_ETC___d408 =
	     ma_train_bank_no == 3'd1 &&
	     (ma_train_bank_bits[2:0] == 3'b111 && random_bank1$OUT == 3'd4 ||
	      !ma_train_bank_bits[0]) ||
	     ma_train_bank_no == 3'd2 &&
	     (ma_train_bank_bits[1:0] == 2'b11 && random_bank2$OUT == 3'd4 ||
	      !ma_train_bank_bits[0]) ||
	     ma_train_bank_no == 3'd3 ||
	     ma_train_bank_no == 3'd4 ;
  assign ma_train_counter_MINUS_1___d267 = ma_train_counter - 3'd1 ;
  assign ma_train_counter_PLUS_1___d265 = ma_train_counter + 3'd1 ;
  assign ma_train_truth_AND_ma_train_bank_no_EQ_3_43_45_ETC___d373 =
	     ma_train_truth && ma_train_bank_no == 3'd3 ||
	     !ma_train_truth &&
	     (ma_train_bank_no == 3'd0 &&
	      (ma_train_bank_bits[3:0] == 4'b1111 &&
	       random_bank0$OUT == 3'd3 ||
	       !ma_train_bank_bits[1]) ||
	      NOT_ma_train_bank_no_EQ_0_36_40_AND_ma_train_b_ETC___d370) ;
  assign ma_train_truth_AND_ma_train_prediction_AND_ma__ETC___d263 =
	     ma_train_truth &&
	     (ma_train_prediction &&
	      (ma_train_bank_no == 3'd0 && ma_train_counter != 3'b111 ||
	       ma_train_bank_no == 3'd1 ||
	       ma_train_bank_no == 3'd2 ||
	       ma_train_bank_no == 3'd3 ||
	       ma_train_bank_no == 3'd4) ||
	      !ma_train_prediction &&
	      (ma_train_bank_no == 3'd0 && ma_train_counter != 3'b0 ||
	       ma_train_bank_no == 3'd1 ||
	       ma_train_bank_no == 3'd2 ||
	       ma_train_bank_no == 3'd3 ||
	       ma_train_bank_no == 3'd4)) ||
	     !ma_train_truth &&
	     (ma_train_prediction &&
	      (ma_train_bank_no == 3'd0 && ma_train_counter != 3'b0 ||
	       ma_train_bank_no == 3'd1 ||
	       ma_train_bank_no == 3'd2 ||
	       ma_train_bank_no == 3'd3 ||
	       ma_train_bank_no == 3'd4) ||
	      !ma_train_prediction &&
	      (ma_train_bank_no == 3'd0 && ma_train_counter != 3'b111 ||
	       ma_train_bank_no == 3'd1 ||
	       ma_train_bank_no == 3'd2 ||
	       ma_train_bank_no == 3'd3 ||
	       ma_train_bank_no == 3'd4)) ;
  assign wr_bank1_out_wget__1_BITS_8_TO_1_8_EQ_rg_pc_co_ETC___d64 =
	     bram_bank1$DOA[8:1] == y__h2995 ;
  assign wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_co_ETC___d56 =
	     bram_bank2$DOA[8:1] == y__h2926 ;
  assign wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d48 =
	     bram_bank3$DOA[8:1] == y__h2857 ;
  assign wr_bank4_out_wget__7_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d40 =
	     bram_bank4$DOA[8:1] == y__h2787 ;
  assign x__h10139 = ~rg_bank3_csr_p[7] ;
  assign x__h10288 = ~rg_bank4_csr_p[7] ;
  assign x__h11606 = ma_train_pc[7:0] ^ rg_bank1_csr_p ;
  assign x__h11837 = ma_train_pc[7:0] ^ rg_bank2_csr_p ;
  assign x__h11883 = ma_train_pc[7:0] ^ rg_bank3_csr_p ;
  assign x__h11929 = ma_train_pc[7:0] ^ rg_bank4_csr_p ;
  assign x__h14612 = rg_global_history[19] ^ rg_bank2_csr_indx[9] ;
  assign x__h14688 = rg_global_history[39] ^ rg_bank3_csr_indx[9] ;
  assign x__h14764 = rg_global_history[79] ^ rg_bank4_csr_indx[9] ;
  assign x__h14861 = rg_global_history[9] ^ rg_bank1_csr_p[5] ;
  assign x__h15009 = rg_global_history[19] ^ rg_bank2_csr_p[3] ;
  assign x__h15136 = rg_global_history[39] ^ rg_bank3_csr_p[7] ;
  assign x__h15212 = rg_global_history[79] ^ rg_bank4_csr_p[7] ;
  assign x__h15309 = rg_global_history[9] ^ rg_bank1_csr_p[2] ;
  assign x__h15577 = rg_global_history[39] ^ rg_bank3_csr_p[4] ;
  assign x__h15725 = rg_global_history[79] ^ rg_bank4_csr_p[2] ;
  assign x__h2823 = rg_pc_copy[7:0] ^ rg_bank4_csr_p ;
  assign x__h2893 = rg_pc_copy[7:0] ^ rg_bank3_csr_p ;
  assign x__h2962 = rg_pc_copy[7:0] ^ rg_bank2_csr_p ;
  assign x__h3031 = rg_pc_copy[7:0] ^ rg_bank1_csr_p ;
  assign x__h4887 = ma_put_pc[9:0] ^ ma_put_pc[19:10] ;
  assign x__h7189 = ma_train_pc[9:0] ^ ma_train_pc[19:10] ;
  assign x__h9093 = ~rg_global_history[19] ;
  assign x__h9566 = ~rg_bank2_csr_p[7] ;
  assign x__h9621 = x__h9622 ^ rg_bank3_csr_p[7] ;
  assign x__h9622 = ~rg_global_history[39] ;
  assign x__h9698 = x__h9699 ^ rg_bank4_csr_p[7] ;
  assign x__h9699 = ~rg_global_history[79] ;
  assign x__h9869 = ~rg_bank1_csr_p[7] ;
  assign x__h9990 = ~rg_bank2_csr_p[6] ;
  assign x__read__h2187 =
	     wr_bank4_out_wget__7_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d40 ?
	       bram_bank4$DOA[11] :
	       (wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d48 ?
		  bram_bank3$DOA[11] :
		  IF_wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_ETC___d68) ;
  assign x__read__h2256 =
	     wr_bank4_out_wget__7_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d40 ?
	       bram_bank4$DOA[11:9] :
	       (wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d48 ?
		  bram_bank3$DOA[11:9] :
		  IF_wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_ETC___d76) ;
  assign x__read__h2326 =
	     { bram_bimodal$DOA[0],
	       bram_bank1$DOA[0],
	       bram_bank2$DOA[0],
	       bram_bank3$DOA[0],
	       bram_bank4$DOA[0] } ;
  assign x__read__h2395 =
	     wr_bank4_out_wget__7_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d40 ?
	       bram_bank4$DOA[8:1] :
	       IF_wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_ETC___d81 ;
  assign x__read__h2464 =
	     wr_bank4_out_wget__7_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d40 ?
	       3'b100 :
	       IF_wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_ETC___d85 ;
  assign y__h11607 = { rg_bank1_csr_s, 1'b0 } ;
  assign y__h11838 = { rg_bank2_csr_s, 1'b0 } ;
  assign y__h11884 = { rg_bank3_csr_s, 1'b0 } ;
  assign y__h11930 = { rg_bank4_csr_s, 1'b0 } ;
  assign y__h2787 = x__h2823 ^ y__h11930 ;
  assign y__h2857 = x__h2893 ^ y__h11884 ;
  assign y__h2926 = x__h2962 ^ y__h11838 ;
  assign y__h2995 = x__h3031 ^ y__h11607 ;
  always@(ma_train_bank_no or
	  IF_ma_train_counter_EQ_0b0_51_THEN_ma_train_co_ETC___d296 or
	  IF_ma_train_bank_bits_BIT_4_70_THEN_0b11_ELSE__ETC___d300)
  begin
    case (ma_train_bank_no)
      3'd0, 3'd1:
	  CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q1 =
	      IF_ma_train_bank_bits_BIT_4_70_THEN_0b11_ELSE__ETC___d300;
      default: CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q1 =
		   IF_ma_train_counter_EQ_0b0_51_THEN_ma_train_co_ETC___d296;
    endcase
  end
  always@(ma_train_bank_no or
	  IF_ma_train_counter_EQ_0b111_37_THEN_ma_train__ETC___d295 or
	  IF_ma_train_bank_bits_BIT_4_70_OR_ma_train_bim_ETC___d303)
  begin
    case (ma_train_bank_no)
      3'd0, 3'd1:
	  CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q2 =
	      IF_ma_train_bank_bits_BIT_4_70_OR_ma_train_bim_ETC___d303;
      default: CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q2 =
		   IF_ma_train_counter_EQ_0b111_37_THEN_ma_train__ETC___d295;
    endcase
  end
  always@(ma_train_bank_no or
	  IF_ma_train_counter_EQ_0b0_51_THEN_ma_train_co_ETC___d296 or
	  IF_ma_train_bank_bits_BIT_4_70_THEN_0b11_ELSE__ETC___d300)
  begin
    case (ma_train_bank_no)
      3'd0, 3'd1, 3'd2:
	  CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q3 =
	      IF_ma_train_bank_bits_BIT_4_70_THEN_0b11_ELSE__ETC___d300;
      default: CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q3 =
		   IF_ma_train_counter_EQ_0b0_51_THEN_ma_train_co_ETC___d296;
    endcase
  end
  always@(ma_train_bank_no or
	  IF_ma_train_counter_EQ_0b111_37_THEN_ma_train__ETC___d295 or
	  IF_ma_train_bank_bits_BIT_4_70_OR_ma_train_bim_ETC___d303)
  begin
    case (ma_train_bank_no)
      3'd0, 3'd1, 3'd2:
	  CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q4 =
	      IF_ma_train_bank_bits_BIT_4_70_OR_ma_train_bim_ETC___d303;
      default: CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q4 =
		   IF_ma_train_counter_EQ_0b111_37_THEN_ma_train__ETC___d295;
    endcase
  end
  always@(ma_train_bank_no or
	  IF_ma_train_counter_EQ_0b0_51_THEN_ma_train_co_ETC___d296 or
	  IF_ma_train_bank_bits_BIT_4_70_THEN_0b11_ELSE__ETC___d300)
  begin
    case (ma_train_bank_no)
      3'd0, 3'd1, 3'd2, 3'd3:
	  CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q5 =
	      IF_ma_train_bank_bits_BIT_4_70_THEN_0b11_ELSE__ETC___d300;
      default: CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q5 =
		   IF_ma_train_counter_EQ_0b0_51_THEN_ma_train_co_ETC___d296;
    endcase
  end
  always@(ma_train_bank_no or
	  IF_ma_train_counter_EQ_0b111_37_THEN_ma_train__ETC___d295 or
	  IF_ma_train_bank_bits_BIT_4_70_OR_ma_train_bim_ETC___d303)
  begin
    case (ma_train_bank_no)
      3'd0, 3'd1, 3'd2, 3'd3:
	  CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q6 =
	      IF_ma_train_bank_bits_BIT_4_70_OR_ma_train_bim_ETC___d303;
      default: CASE_ma_train_bank_no_0_IF_ma_train_bank_bits__ETC__q6 =
		   IF_ma_train_counter_EQ_0b111_37_THEN_ma_train__ETC___d295;
    endcase
  end
  always@(ma_train_bank_no or ma_train_tag or lv_new_tag2__h5058)
  begin
    case (ma_train_bank_no)
      3'd0, 3'd1:
	  CASE_ma_train_bank_no_0_lv_new_tag2058_1_lv_ne_ETC__q7 =
	      lv_new_tag2__h5058;
      default: CASE_ma_train_bank_no_0_lv_new_tag2058_1_lv_ne_ETC__q7 =
		   ma_train_tag;
    endcase
  end
  always@(ma_train_bank_no or ma_train_tag or lv_new_tag3__h5059)
  begin
    case (ma_train_bank_no)
      3'd0, 3'd1, 3'd2:
	  CASE_ma_train_bank_no_0_lv_new_tag3059_1_lv_ne_ETC__q8 =
	      lv_new_tag3__h5059;
      default: CASE_ma_train_bank_no_0_lv_new_tag3059_1_lv_ne_ETC__q8 =
		   ma_train_tag;
    endcase
  end
  always@(ma_train_bank_no or ma_train_tag or lv_new_tag4__h5060)
  begin
    case (ma_train_bank_no)
      3'd0, 3'd1, 3'd2, 3'd3:
	  CASE_ma_train_bank_no_0_lv_new_tag4060_1_lv_ne_ETC__q9 =
	      lv_new_tag4__h5060;
      default: CASE_ma_train_bank_no_0_lv_new_tag4060_1_lv_ne_ETC__q9 =
		   ma_train_tag;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        random_bank0_initialized <= `BSV_ASSIGNMENT_DELAY 1'd0;
	random_bank1_initialized <= `BSV_ASSIGNMENT_DELAY 1'd0;
	random_bank2_initialized <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_bank1_csr_p <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_bank1_csr_s <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_bank2_csr_indx <= `BSV_ASSIGNMENT_DELAY 10'd0;
	rg_bank2_csr_p <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_bank2_csr_s <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_bank3_csr_indx <= `BSV_ASSIGNMENT_DELAY 10'd0;
	rg_bank3_csr_p <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_bank3_csr_s <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_bank4_csr_indx <= `BSV_ASSIGNMENT_DELAY 10'd0;
	rg_bank4_csr_p <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_bank4_csr_s <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_bimodal_flush_addr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	rg_flush <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_global_flush_addr <= `BSV_ASSIGNMENT_DELAY 10'd0;
	rg_global_history <= `BSV_ASSIGNMENT_DELAY 80'd0;
	rg_init_rand <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_pc_copy <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (random_bank0_initialized$EN)
	  random_bank0_initialized <= `BSV_ASSIGNMENT_DELAY
	      random_bank0_initialized$D_IN;
	if (random_bank1_initialized$EN)
	  random_bank1_initialized <= `BSV_ASSIGNMENT_DELAY
	      random_bank1_initialized$D_IN;
	if (random_bank2_initialized$EN)
	  random_bank2_initialized <= `BSV_ASSIGNMENT_DELAY
	      random_bank2_initialized$D_IN;
	if (rg_bank1_csr_p$EN)
	  rg_bank1_csr_p <= `BSV_ASSIGNMENT_DELAY rg_bank1_csr_p$D_IN;
	if (rg_bank1_csr_s$EN)
	  rg_bank1_csr_s <= `BSV_ASSIGNMENT_DELAY rg_bank1_csr_s$D_IN;
	if (rg_bank2_csr_indx$EN)
	  rg_bank2_csr_indx <= `BSV_ASSIGNMENT_DELAY rg_bank2_csr_indx$D_IN;
	if (rg_bank2_csr_p$EN)
	  rg_bank2_csr_p <= `BSV_ASSIGNMENT_DELAY rg_bank2_csr_p$D_IN;
	if (rg_bank2_csr_s$EN)
	  rg_bank2_csr_s <= `BSV_ASSIGNMENT_DELAY rg_bank2_csr_s$D_IN;
	if (rg_bank3_csr_indx$EN)
	  rg_bank3_csr_indx <= `BSV_ASSIGNMENT_DELAY rg_bank3_csr_indx$D_IN;
	if (rg_bank3_csr_p$EN)
	  rg_bank3_csr_p <= `BSV_ASSIGNMENT_DELAY rg_bank3_csr_p$D_IN;
	if (rg_bank3_csr_s$EN)
	  rg_bank3_csr_s <= `BSV_ASSIGNMENT_DELAY rg_bank3_csr_s$D_IN;
	if (rg_bank4_csr_indx$EN)
	  rg_bank4_csr_indx <= `BSV_ASSIGNMENT_DELAY rg_bank4_csr_indx$D_IN;
	if (rg_bank4_csr_p$EN)
	  rg_bank4_csr_p <= `BSV_ASSIGNMENT_DELAY rg_bank4_csr_p$D_IN;
	if (rg_bank4_csr_s$EN)
	  rg_bank4_csr_s <= `BSV_ASSIGNMENT_DELAY rg_bank4_csr_s$D_IN;
	if (rg_bimodal_flush_addr$EN)
	  rg_bimodal_flush_addr <= `BSV_ASSIGNMENT_DELAY
	      rg_bimodal_flush_addr$D_IN;
	if (rg_flush$EN) rg_flush <= `BSV_ASSIGNMENT_DELAY rg_flush$D_IN;
	if (rg_global_flush_addr$EN)
	  rg_global_flush_addr <= `BSV_ASSIGNMENT_DELAY
	      rg_global_flush_addr$D_IN;
	if (rg_global_history$EN)
	  rg_global_history <= `BSV_ASSIGNMENT_DELAY rg_global_history$D_IN;
	if (rg_init_rand$EN)
	  rg_init_rand <= `BSV_ASSIGNMENT_DELAY rg_init_rand$D_IN;
	if (rg_pc_copy$EN)
	  rg_pc_copy <= `BSV_ASSIGNMENT_DELAY rg_pc_copy$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    random_bank0_initialized = 1'h0;
    random_bank1_initialized = 1'h0;
    random_bank2_initialized = 1'h0;
    rg_bank1_csr_p = 8'hAA;
    rg_bank1_csr_s = 7'h2A;
    rg_bank2_csr_indx = 10'h2AA;
    rg_bank2_csr_p = 8'hAA;
    rg_bank2_csr_s = 7'h2A;
    rg_bank3_csr_indx = 10'h2AA;
    rg_bank3_csr_p = 8'hAA;
    rg_bank3_csr_s = 7'h2A;
    rg_bank4_csr_indx = 10'h2AA;
    rg_bank4_csr_p = 8'hAA;
    rg_bank4_csr_s = 7'h2A;
    rg_bimodal_flush_addr = 12'hAAA;
    rg_flush = 1'h0;
    rg_global_flush_addr = 10'h2AA;
    rg_global_history = 80'hAAAAAAAAAAAAAAAAAAAA;
    rg_init_rand = 1'h0;
    rg_pc_copy = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkbranch

